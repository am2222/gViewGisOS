//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:2.0.50727.6111
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------


namespace gView.MapServer.Tasker.InstanceConnector
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "IMapServerInstanceService")]
    public interface IMapServerInstanceService
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMapServerInstanceService/ServiceRequest", ReplyAction = "http://tempuri.org/IMapServerInstanceService/ServiceRequestResponse")]
        string ServiceRequest(string service, string request, string InterpreterGUID, string usr, string pwd);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMapServerInstanceService/ServiceRequest2", ReplyAction = "http://tempuri.org/IMapServerInstanceService/ServiceRequest2Response")]
        string ServiceRequest2(string OnlineResource, string service, string request, string InterpreterGUID, string usr, string pwd);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMapServerInstanceService/AddMap", ReplyAction = "http://tempuri.org/IMapServerInstanceService/AddMapResponse")]
        bool AddMap(string mapName, string MapXML, string usr, string pwd);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMapServerInstanceService/RemoveMap", ReplyAction = "http://tempuri.org/IMapServerInstanceService/RemoveMapResponse")]
        bool RemoveMap(string mapName, string usr, string pwd);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMapServerInstanceService/Ping", ReplyAction = "http://tempuri.org/IMapServerInstanceService/PingResponse")]
        string Ping();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMapServerInstanceService/GetMetadata", ReplyAction = "http://tempuri.org/IMapServerInstanceService/GetMetadataResponse")]
        string GetMetadata(string mapName, string usr, string pwd);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMapServerInstanceService/SetMetadata", ReplyAction = "http://tempuri.org/IMapServerInstanceService/SetMetadataResponse")]
        bool SetMetadata(string mapName, string metadata, string usr, string pwd);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMapServerInstanceService/ReloadMap", ReplyAction = "http://tempuri.org/IMapServerInstanceService/ReloadMapResponse")]
        bool ReloadMap(string mapName, string usr, string pwd);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IMapServerInstanceServiceChannel : IMapServerInstanceService, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class MapServerInstanceServiceClient : System.ServiceModel.ClientBase<IMapServerInstanceService>, IMapServerInstanceService
    {

        public MapServerInstanceServiceClient()
        {
        }

        public MapServerInstanceServiceClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        public MapServerInstanceServiceClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public MapServerInstanceServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public MapServerInstanceServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        public string ServiceRequest(string service, string request, string InterpreterGUID, string usr, string pwd)
        {
            return base.Channel.ServiceRequest(service, request, InterpreterGUID, usr, pwd);
        }

        public string ServiceRequest2(string OnlineResource, string service, string request, string InterpreterGUID, string usr, string pwd)
        {
            return base.Channel.ServiceRequest2(OnlineResource, service, request, InterpreterGUID, usr, pwd);
        }

        public bool AddMap(string mapName, string MapXML, string usr, string pwd)
        {
            return base.Channel.AddMap(mapName, MapXML, usr, pwd);
        }

        public bool RemoveMap(string mapName, string usr, string pwd)
        {
            return base.Channel.RemoveMap(mapName, usr, pwd);
        }

        public string Ping()
        {
            return base.Channel.Ping();
        }

        public string GetMetadata(string mapName, string usr, string pwd)
        {
            return base.Channel.GetMetadata(mapName, usr, pwd);
        }

        public bool SetMetadata(string mapName, string metadata, string usr, string pwd)
        {
            return base.Channel.SetMetadata(mapName, metadata, usr, pwd);
        }

        public bool ReloadMap(string mapName, string usr, string pwd)
        {
            return base.Channel.ReloadMap(mapName, usr, pwd);
        }
    }
}
